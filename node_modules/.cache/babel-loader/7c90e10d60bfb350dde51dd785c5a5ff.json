{"ast":null,"code":"import _asyncToGenerator from \"/home/Delivery/YOWL/wordpress/project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/Delivery/YOWL/wordpress/project/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { required, email } from \"vee-validate/dist/rules\";\nimport { extend, ValidationProvider, setInteractionMode, ValidationObserver } from \"vee-validate\";\nsetInteractionMode(\"eager\");\nextend(\"required\", _objectSpread(_objectSpread({}, required), {}, {\n  message: \"{_field_} can not be empty\"\n}));\nextend(\"email\", _objectSpread(_objectSpread({}, email), {}, {\n  message: \"Email must be valid\"\n}));\nexport default {\n  components: {\n    ValidationProvider: ValidationProvider,\n    ValidationObserver: ValidationObserver\n  },\n  data: function data() {\n    return {\n      email: \"\",\n      password: null,\n      showPass: false\n    };\n  },\n  computed: {\n    params: function params() {\n      return {\n        email: this.email,\n        password: this.password\n      };\n    }\n  },\n  methods: {\n    submit: function submit() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var valid;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$refs.observer.validate();\n\n              case 2:\n                valid = _context.sent;\n\n                if (valid) {\n                  _this.login(_this.params); // action to login\n\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    clear: function clear() {\n      // you can use this method to clear login form\n      this.email = \"\";\n      this.password = null;\n      this.$refs.observer.reset();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;AACA,SACAA,MADA,EAEAC,kBAFA,EAGAC,kBAHA,EAIAC,kBAJA,QAKA,cALA;AAOAD;AAEAF,mDACAI,QADA;EAEAC;AAFA;AAKAL,gDACAM,KADA;EAEAD;AAFA;AAKA;EACAE;IACAN,sCADA;IAEAE;EAFA,CADA;EAKAK;IAAA;MACAF,SADA;MAEAG,cAFA;MAGAC;IAHA;EAAA,CALA;EAUAC;IACAC,MADA,oBACA;MACA;QACAN,iBADA;QAEAG;MAFA;IAIA;EANA,CAVA;EAkBAI;IACAC,MADA,oBACA;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACA,+BADA;;cAAA;gBACAC,KADA;;gBAEA;kBACA,0BADA,CACA;;gBACA;;cAJA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAKA,CANA;IAOAC,KAPA,mBAOA;MACA;MACA;MACA;MACA;IACA;EAZA;AAlBA","names":["extend","ValidationProvider","setInteractionMode","ValidationObserver","required","message","email","components","data","password","showPass","computed","params","methods","submit","valid","clear"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n  <section class=\"section-container\">\n    <v-row class=\"signin\">\n      <v-col cols=\"8\" class=\"left\">\n        <h1>Welcome to my site</h1>\n      </v-col>\n      <v-col cols=\"4\" class=\"right\">\n        <h2>LOGIN</h2>\n        <validation-observer ref=\"observer\">\n          <v-form @submit.prevent=\"submit\">\n            <validation-provider\n              v-slot=\"{ errors }\"\n              name=\"Name\"\n              rules=\"required|email\"\n            >\n              <v-text-field\n                v-model=\"email\"\n                :error-messages=\"errors\"\n                label=\"Email\"\n                required\n                outlined\n                dark\n                filled\n                dense\n              ></v-text-field>\n            </validation-provider>\n            <validation-provider\n              v-slot=\"{ errors }\"\n              name=\"email\"\n              rules=\"required\"\n            >\n              <v-text-field\n                v-model=\"password\"\n                :error-messages=\"errors\"\n                label=\"Password\"\n                :append-icon=\"showPass ? 'mdi-eye' : 'mdi-eye-off'\"\n                @click:append=\"showPass = !showPass\"\n                required\n                outlined\n                dense\n                dark\n                filled\n                :type=\"showPass ? 'text' : 'password'\"\n              ></v-text-field>\n            </validation-provider>\n            <div class=\"text-center\">\n              <v-btn\n                class=\"signin-btn\"\n                type=\"submit\"\n                rounded\n                color=\"white\"\n                dark\n              >\n                Sign In\n              </v-btn>\n            </div>\n          </v-form>\n        </validation-observer>\n      </v-col>\n    </v-row>\n  </section>\n</template>\n\n<script>\nimport { required, email } from \"vee-validate/dist/rules\";\nimport {\n  extend,\n  ValidationProvider,\n  setInteractionMode,\n  ValidationObserver,\n} from \"vee-validate\";\n\nsetInteractionMode(\"eager\");\n\nextend(\"required\", {\n  ...required,\n  message: \"{_field_} can not be empty\",\n});\n\nextend(\"email\", {\n  ...email,\n  message: \"Email must be valid\",\n});\n\nexport default {\n  components: {\n    ValidationProvider,\n    ValidationObserver,\n  },\n  data: () => ({\n    email: \"\",\n    password: null,\n    showPass: false,\n  }),\n  computed: {\n    params() {\n      return {\n        email: this.email,\n        password: this.password,\n      };\n    },\n  },\n  methods: {\n    async submit() {\n      const valid = await this.$refs.observer.validate();\n      if (valid) {\n        this.login(this.params); // action to login\n      }\n    },\n    clear() {\n      // you can use this method to clear login form\n      this.email = \"\";\n      this.password = null;\n      this.$refs.observer.reset();\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}